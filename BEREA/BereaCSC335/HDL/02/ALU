CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
   // Put you code here:
		Xor16(a=x, b=x, out= ZEROX);
		Xor16(a=y, b=y, out= ZEROY);
		Mux16(a=x, b=ZEROX, sel = zx out = X2);
		Mux16(a=y, b=ZEROY, sel = zy out = Y2);
		Not16(in=XZ , out= NEGX);
		Not16(in=XY , out= NEGY);
		Mux16(a=NEGX, b=X2, sel=nx, out=X3); //Check the book for the order of A and B
		Mux16(a=NEGY, b=Y2, sel=ny, out=Y3);
		And16(a=X3, b=Y3, out= XandY);
		Add16(a=X3, b=Y3, out= XaddY);
		Mux16(a=XaddY, b=XandY, sel=f out= XY);
		Not16(in=XY, out= XY2);
		Mux16(a=XY, b=XY2, sel=no, out= out, out=INNEROUT, out[15]=ng); // Pretty sure 15 is the MSB
		Not16(in=INNEROUT, out=NOTOUT);
		And16way(a=NOTOUT, b=NOTOUT, out= zr);	
}



































CHIP ALU {

    IN  // 16-bit inputs:
        x[16], y[16],
        // Control bits:
        zx, // Zero the x input
        nx, // Negate the x input
        zy, // Zero the y input
        ny, // Negate the y input
        f,  // Function code: 1 for add, 0 for and
        no; // Negate the out output

    OUT // 16-bit output
        out[16],

        // ALU output flags
        zr, // 1 if out=0, 0 otherwise
        ng; // 1 if out<0, 0 otherwise

    PARTS:
    Mux16(a[0..15]=x, b[0..15]=false, sel=zx, out[0..15]=x1);
    Mux16(a[0..15]=y, b[0..15]=false, sel=zy, out[0..15]=y1);

    Not16(in[0..15]=x1, out[0..15]=xcomp);
    Mux16(a[0..15]=x1, b[0..15]=xcomp, sel=nx, out[0..15]=x2);

    Not16(in[0..15]=y1, out[0..15]=ycomp);
    Mux16(a[0..15]=y1, b[0..15]=ycomp, sel=ny, out[0..15]=y2);
    
    And16(a[0..15]=x2, b[0..15]=y2, out[0..15]=xandy);
    Add16(a[0..15]=x2, b[0..15]=y2, out[0..15]=xaddy);
    Mux16(a[0..15]=xandy, b[0..15]=xaddy, sel=f, out[0..15]=out1);

    Not16(in[0..15]=out1, out[0..15]=outcomp);
    Mux16(a[0..15]=out1, b[0..15]=outcomp, sel=no, out[0..15]=out, out[0..15]=out2, out[15]=ng, out[15]=ng1);	        
    
    Add16(a[0..15]=out2, b[0..15]=true, out[0..15]=out3, out[15]=out315);
    Not(in=ng1, out=ngcomp);
    And(a=ngcomp, b=out315, out=zr);
    
    
}